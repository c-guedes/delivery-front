import { useState } from 'react';
import { useNavigate } from 'react-router-dom';

interface CartItem {
  id: string;
  name: string;
  price: number;
  quantity: number;
  image: string;
}

export default function Cart() {
  const navigate = useNavigate();
  const [step, setStep] = useState<'cart' | 'address' | 'payment' | 'confirmation'>('cart');
  const [cartItems, setCartItems] = useState<CartItem[]>([
    {
      id: '1',
      name: 'Cupcake de Chocolate',
      price: 8.90,
      quantity: 1,
      image: 'https://via.placeholder.com/100x100'
    }
  ]);
  const [address, setAddress] = useState({
    street: '',
    number: '',
    complement: '',
    neighborhood: '',
    city: '',
    state: '',
    zipCode: ''
  });
  const [paymentMethod, setPaymentMethod] = useState<'credit' | 'debit' | 'pix'>('credit');

  const total = cartItems.reduce((sum, item) => sum + item.price * item.quantity, 0);

  const updateQuantity = (id: string, delta: number) => {
    setCartItems(items =>
      items.map(item =>
        item.id === id
          ? { ...item, quantity: Math.max(0, item.quantity + delta) }
          : item
      ).filter(item => item.quantity > 0)
    );
  };

  const handleCheckout = async () => {
    // Aqui será implementada a integração com o backend
    console.log('Checkout:', {
      items: cartItems,
      address,
      paymentMethod,
      total
    });
    navigate('/customer/orders');
  };

  return (
    <div className="max-w-2xl mx-auto p-6">
      {/* Progress Steps */}
      <div className="mb-8">
        <div className="flex justify-between">
          {['Carrinho', 'Endereço', 'Pagamento', 'Confirmação'].map((text, index) => (
            <div
              key={text}
              className={'flex items-center ' + (
                index === ['cart', 'address', 'payment', 'confirmation'].indexOf(step)
                  ? 'text-pink-600'
                  : 'text-gray-400'
              )}
            >
              <div className="flex flex-col items-center">
                <div className={'w-8 h-8 rounded-full border-2 flex items-center justify-center mb-2 ' + (
                  index === ['cart', 'address', 'payment', 'confirmation'].indexOf(step)
                    ? 'border-pink-600'
                    : 'border-gray-300'
                )}>
                  {index + 1}
                </div>
                <span className="text-sm">{text}</span>
              </div>
              {index < 3 && (
                <div className="w-full h-0.5 mx-4 mt-4 bg-gray-200" />
              )}
            </div>
          ))}
        </div>
      </div>

      {step === 'cart' && (
        <>
          <h2 className="text-2xl font-bold mb-6">Carrinho de Compras</h2>
          {cartItems.map(item => (
            <div key={item.id} className="bg-white rounded-lg shadow p-4 mb-4">
              <div className="flex items-center justify-between">
                <div className="flex items-center space-x-4">
                  <img 
                    src={item.image}
                    alt={item.name}
                    className="w-16 h-16 object-cover rounded"
                  />
                  <div>
                    <h3 className="font-semibold">{item.name}</h3>
                    <p className="text-gray-500">R$ {item.price.toFixed(2)}</p>
                  </div>
                </div>
                <div className="flex items-center space-x-2">
                  <button
                    onClick={() => updateQuantity(item.id, -1)}
                    className="text-gray-500 hover:text-gray-700"
                  >
                    -
                  </button>
                  <span className="px-4">{item.quantity}</span>
                  <button
                    onClick={() => updateQuantity(item.id, 1)}
                    className="text-gray-500 hover:text-gray-700"
                  >
                    +
                  </button>
                </div>
              </div>
            </div>
          ))}
        </>
      )}

      {step === 'address' && (
        <>
          <h2 className="text-2xl font-bold mb-6">Endereço de Entrega</h2>
          <div className="space-y-4">
            <div>
              <label className="block text-sm font-medium text-gray-700">CEP</label>
              <input
                type="text"
                value={address.zipCode}
                onChange={(e) => setAddress({ ...address, zipCode: e.target.value })}
                className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-pink-500 focus:ring-pink-500"
              />
            </div>
            {/* Outros campos de endereço */}
          </div>
        </>
      )}

      {step === 'payment' && (
        <>
          <h2 className="text-2xl font-bold mb-6">Forma de Pagamento</h2>
          <div className="space-y-4">
            {(['credit', 'debit', 'pix'] as const).map(method => (
              <button
                key={method}
                onClick={() => setPaymentMethod(method)}
                className={'w-full p-4 text-left border rounded-lg ' + (
                  paymentMethod === method
                    ? 'border-pink-500 bg-pink-50'
                    : 'border-gray-200'
                )}
              >
                {method === 'credit' && 'Cartão de Crédito'}
                {method === 'debit' && 'Cartão de Débito'}
                {method === 'pix' && 'PIX'}
              </button>
            ))}
          </div>
        </>
      )}

      {step === 'confirmation' && (
        <>
          <h2 className="text-2xl font-bold mb-6">Confirmação do Pedido</h2>
          <div className="space-y-6">
            <div className="bg-white rounded-lg shadow p-4">
              <h3 className="font-semibold mb-2">Itens do Pedido</h3>
              {cartItems.map(item => (
                <div key={item.id} className="flex justify-between py-2">
                  <span>{item.name} x{item.quantity}</span>
                  <span>R$ {(item.price * item.quantity).toFixed(2)}</span>
                </div>
              ))}
            </div>

            <div className="bg-white rounded-lg shadow p-4">
              <h3 className="font-semibold mb-2">Endereço de Entrega</h3>
              <p>{address.street}, {address.number}</p>
              <p>{address.neighborhood}, {address.city} - {address.state}</p>
            </div>

            <div className="bg-white rounded-lg shadow p-4">
              <h3 className="font-semibold mb-2">Forma de Pagamento</h3>
              <p>
                {paymentMethod === 'credit' && 'Cartão de Crédito'}
                {paymentMethod === 'debit' && 'Cartão de Débito'}
                {paymentMethod === 'pix' && 'PIX'}
              </p>
            </div>
          </div>
        </>
      )}

      <div className="bg-white rounded-lg shadow p-4 mt-6">
        <div className="flex justify-between items-center mb-4">
          <span className="font-semibold">Total:</span>
          <span className="font-bold text-lg">R$ {total.toFixed(2)}</span>
        </div>
        <button
          onClick={() => {
            if (step === 'cart') setStep('address');
            else if (step === 'address') setStep('payment');
            else if (step === 'payment') setStep('confirmation');
            else handleCheckout();
          }}
          className="w-full bg-pink-600 text-white py-2 rounded hover:bg-pink-700"
        >
          {step === 'confirmation' ? 'Finalizar Pedido' : 'Continuar'}
        </button>
        {step !== 'cart' && (
          <button
            onClick={() => {
              if (step === 'address') setStep('cart');
              else if (step === 'payment') setStep('address');
              else if (step === 'confirmation') setStep('payment');
            }}
            className="w-full mt-2 bg-gray-100 text-gray-600 py-2 rounded hover:bg-gray-200"
          >
            Voltar
          </button>
        )}
      </div>
    </div>
  );
}
